#+title: My emacs settings

** TODOs
***** DONE Corfu delay + no 3 keys
***** DONE Which key delay
***** DONE blamer mode
***** DONE corfu not auto starting
***** DONE Org Roam
***** DONE vterm
***** DONE undo tree
***** TODO fix evil undo tree integration
***** TODO elfeed
***** TODO erc settings
***** TODO ement.el
***** TODO you surround
***** TODO multiple cursors
***** TODO protobuf-mode
***** TODO snippets
***** TODO DAP
***** TODO Icon theme
***** TODO startup time
***** TODO EMMS
***** TODO Org Agenda
***** TODO use treemacs full power

** Early Init

#+begin_src emacs-lisp :tangle ~/Git/dotfiles/.emacs.d/early-init.el
#+end_src

#+property: header-args:emacs-lisp :tangle ~/Git/dotfiles/.emacs.d/init.el

** Setup package manager

For many of the following settings I'll need to install some packages, so its best to have it configured upfront.

Note: if you get 404 when trying to install packages, run ~M-x package-refresh-contents~.

*** Setup MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

*** Setup use-package

Install use-package if not installed, then require it.

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile (require 'use-package))
#+end_src

This ensures all packages from ~use-package~ are installed when emacs loads.

#+begin_src emacs-lisp
  (setq use-package-always-ensure t)
#+end_src

** De-clutter

Hides startup message, scroll bar and tool bar.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

No annoying bell sound nor flashing lights when something goes wrong.
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
  (setq ring-bell-function 'ignore) ; this is actually sound, but...
#+end_src

Launch in fullscreen.
#+begin_src emacs-lisp
  (toggle-frame-fullscreen)
#+end_src

** Font

Increase default font size

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 140)
#+end_src

** Theme

*** Doom Themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :defer 0.3
    :config
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-one t))
#+end_src

** Icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))

  ;; run once
  ;;(all-the-icons-install-fonts t)
  ;;(nerd-icons-install-fonts t)
#+end_src

** Modeline

*** Doom Modeline
Nicer modeline.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :defer 1
    :config (doom-modeline-mode 1))
#+end_src

** TODO Whitspaces

*** TODO Highlight trailing whitespaces

TODO: add other modes

#+begin_src emacs-lisp
  (add-hook 'prog-mode '(setq show-trailing-whitespace t))
#+end_src

*** TODO Show symbols for spaces and tabs
TODO: show a symbol like ~>~ for tab and ~•~, ideally in visual mode.

** Warnings

Disable annoying warnings at startup.

#+begin_src emacs-lisp
  (setq warning-minimum-level :emergency)
#+end_src

** Lines

Show column number.

#+begin_src emacs-lisp
  (column-number-mode 1) ;; TODO
#+end_src

Relative line numbers.

#+begin_src emacs-lisp
  (setq display-line-numbers-type 'relative)

#+end_src

Enable line numbers for some modes.

#+begin_src emacs-lisp
  (dolist (mode '(text-mode-hook
                 prog-mode-hook
                 conf-mode-hook))
    (add-hook mode #'display-line-numbers-mode))
#+end_src

Wrap long lines.

#+begin_src emacs-lisp
  (global-visual-line-mode 1)
#+end_src

** Scroll

I don't know how to explain this shit.
But it improves scrolling for sure.

#+begin_src emacs-lisp
  (setq scroll-step 1)
  (setq scroll-margin 1)
  (setq scroll-conservatively 1000)
  (setq scroll-preserve-screen-position 1)
#+end_src

** Emacs files

Emacs creates a bunch of annoying files.

*** Disable lock files

#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

*** Emacs directories

#+begin_src emacs-lisp
  (setq user-emacs-directory "~/.cache/emacs/")
  (when (not (file-directory-p user-emacs-directory))
    (make-directory user-emacs-directory))

  ;; wtf
  (setq backup-directory-alist
	`((".*" . ,(expand-file-name "backups" user-emacs-directory)))
				     backup-by-copying t
				     version-control t
				     delete-old-versions t
				     vc-make-backup-files t
				     kept-old-versions 10
				     kept-new-versions 10)

#+end_src

*** Custom variables file

This way I can build init.el from init.org without loosing custom variables.

#+begin_src emacs-lisp
  (setq custom-file "~/Git/dotfiles/.emacs.d/custom.el")
#+end_src

** Minibuffer

*** Persist minibuffers

Persist minibuffers history, like in ~M-x~, ~C-x C-f~ and so on.

#+begin_src emacs-lisp
  (savehist-mode 1)
  (setq history-length 100)
#+end_src

*** Vertico

Improves minibuffer by showing multiple options in a vertical list.

#+begin_src emacs-lisp
  (use-package vertico
    :config
    (vertico-mode 1)
    (keymap-set vertico-map "C-j" #'vertico-next)
    (keymap-set vertico-map "C-k" #'vertico-previous))
#+end_src

Make vertico appear at the center of the screen.

#+begin_src emacs-lisp
  (use-package vertico-posframe
    :config (vertico-posframe-mode))
#+end_src

** Fuzzy Search

*** Orderless

Provides fuzzy search for files, commands, variables, and so on.

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Suggestion and Completion

*** Autosuggestion and Completion for Code

Emacs supports completion builtin with ~C-M-i~, but for a VSCode-like completion I use corfu.
You can still use ~C-M-i~ to launch corfu.

#+begin_src emacs-lisp
  (use-package corfu
    :config
    (setq corfu-auto t)
    (setq corfu-auto-delay 0.2)
    (setq corfu-auto-prefix 1)
    (setq corfu-cycle t)
    (global-set-key (kbd "C-SPC") #'completion-at-point)
    (global-corfu-mode 1))
#+end_src

*** Autosuggestion for keybindings

~whick-key~ suggests key combinations as you press them.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-secondary-delay 0.1))
#+end_src

** Save state

*** Save session

Save session when emacs is closed and restore when reopened.

#+begin_src emacs-lisp
  (desktop-save-mode 1)
#+end_src

*** Cursor position

Save cursor position per file.

#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

** Recent files

Show recent files with ~C-x C-r~.

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 100)
  (setq recentf-max-saved-items 100)
  (global-set-key "\C-x\ \C-r" 'recentf-open)
#+end_src

** Buffers

Refreshs file automatically when its changed by other program. Also refreshes dired.

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t) ; for dired
#+end_src

** Auto close pairs

Auto close pairs like '',"", [ ], { }, depending on the file type.

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

** Prompts

*** Y or N instead of Yes or No

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Escape to quit prompts

Press escape to quit most prompts.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** PDF

I tried default emacs doc-view-mode but it didn't work with the PDFs I tested.

*** pdf-tools

Installing pdf-tools and opening a PDF file just works here.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer
    :config
    (pdf-tools-install))
#+end_src

** Org Mode

*** TODO Visuals

Show headings with special bullets instead o asterisks.

#+begin_src emacs-lisp
  (use-package org-bullets :defer)
#+end_src

Change title and heading sizes.

TODO: move non-visuals to separate hook
#+begin_src emacs-lisp
    (add-hook 'org-mode-hook (lambda()
                                 (org-bullets-mode 1)
                                 (org-indent-mode 1)
                                 (set-face-attribute 'org-document-title nil :height 1.8)
                                 (set-face-attribute 'org-level-1 nil :height 1.8)
                                 (set-face-attribute 'org-level-2 nil :height 1.5)
                                 (set-face-attribute 'org-level-3 nil :height 1.2)
                                 (org-overview)))
#+end_src

Whether to hide or not symbols for emphasis like ~a~, *b*, /c/...

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

Replace ~-~ by ~•~ on unordered lists.

#+begin_src emacs-lisp
  ;; org mode lists
  ;; (font-lock-add-keywords 'org-mode
  ;;     '(("^ *\\([-]\\) "
  ;;     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

*** Org Roam


#+begin_src emacs-lisp
  (use-package org-roam
    :defer
    :config
    (when (not (file-directory-p "~/.Roam"))
      (make-directory "~/.Roam"))
    (setq org-roam-directory "~/.Roam")

    (org-roam-db-autosync-enable)

    :bind
    (("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert)))
#+end_src

*** Org Roam UI

Visualize Roam graph in real time

#+begin_src emacs-lisp
  (use-package org-roam-ui :defer)
#+end_src

** LSP

*** Eglot

Eglot is a builtin LSP client for emacs.

#+begin_src emacs-lisp
  (use-package eglot
    :hook
    (before-save . eglot-format)

    :init
    ;; do not block when loading lsp
    (setq eglot-sync-connect nil)

    ;; don't use more than one line for eldoc, unless called with K
    (setq eldoc-echo-area-use-multiline-p 1)

    (define-key evil-normal-state-map (kbd "gi") 'eglot-find-implementation)

    (add-hook 'before-save-hook
              (lambda ()
                (call-interactively 'eglot-code-action-organize-imports))
              t nil))
#+end_src

*** TODO Hover box

Show docs as a hover box instead of using echo area.

#+begin_src emacs-lisp
  ;; TODO hook to modes
  (use-package eldoc-box
    :config
    (add-hook 'eglot-managed-mode-hook #'eldoc-box-hover-at-point-mode t))
#+end_src

** Languages
*** Go
#+begin_src emacs-lisp
  (use-package go-mode
    :defer
    :hook
    (go-mode . eglot-ensure))
#+end_src

*** Nix
#+begin_src emacs-lisp
  (use-package nix-mode :defer)
#+end_src

*** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode :defer)
#+end_src

** TODO DAP
** TODO Vim keybindings

*** TODO Evil Mode

evil mode and evil-collection provide vim-like bindings.

#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :init
    (setq evil-want-C-u-scroll t) ; C-u won't work by default
    (setq evil-want-keybinding nil) ; what? idk
    (setq evil-undo-system 'undo-redo)
    :config
    (evil-set-leader nil (kbd "SPC"))
    (define-key evil-normal-state-map (kbd "gb") 'evil-switch-to-windows-last-buffer)
    (define-key evil-normal-state-map (kbd "TT") 'tab-bar-switch-to-tab)
    (define-key evil-normal-state-map (kbd "Th") 'tab-previous)
    (define-key evil-normal-state-map (kbd "Tl") 'tab-next)
    (define-key evil-normal-state-map (kbd "Tn") 'tab-new)
    (advice-add 'evil-scroll-up :after 'evil-scroll-line-to-center)
    (advice-add 'evil-scroll-down :after 'evil-scroll-line-to-center)
    (define-key evil-normal-state-map (kbd "Tc") 'tab-close))
    (evil-mode 1)

  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src


*** Keychord

I only use it to map ~jk~ to ~<Escape>~.

#+begin_src emacs-lisp
  (use-package key-chord
    :after evil
    :config
    (key-chord-mode 1)
    (setq key-chord-two-keys-delay 0.2)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+end_src

** TODO Git

*** Magit

TODO: hook to file save

#+begin_src emacs-lisp
  (use-package magit :defer)
#+end_src

*** Diff Highlight

TODO: hook to magit

#+begin_src emacs-lisp
  (use-package diff-hl
    :defer 1
    :init (global-diff-hl-mode 1))
#+end_src

*** Blamer

Blamer shows a git blame similar to GitLens in VSCode.

#+begin_src emacs-lisp
  (use-package blamer
    :defer 1
    :config
    (global-blamer-mode 1))
#+end_src

** TODO Directory Tree

*** TreeMacs

#+begin_src emacs-lisp
  (use-package treemacs
    :config
    (setq treemacs-width 40)
    :bind
    (:map global-map
	  ([f8] . treemacs)))
#+end_src

** TODO Undo Tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :demand t
    :config
    (when (not (file-directory-p "~/.emacs.d/undotree"))
      (make-directory "~/.emacs.d/undotree"))
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undotree")))
    (setq evil-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
#+end_src

** TODO Pomodoro

#+begin_src emacs-lisp
  ;; (use-package pomidor
  ;;   :config
  ;;   (setq pomidor-play-sound-file
  ;; 	(lambda (file)
  ;; 	  (start-process "aplay" nil "aplay" file))))
#+end_src

** TODO Terminal

#+begin_src emacs-lisp
  (use-package vterm
    :defer
    :config
    (define-key evil-normal-state-map (kbd "<leader>t") 'vterm))
#+end_src

** TODO Multiple Cursors

#+begin_src emacs-lisp
  (use-package evil-mc :defer)
#+end_src

** TODO Zen Mode

TODO: keybinding

#+begin_src emacs-lisp
  (use-package writeroom-mode
    :init
    (setq writeroom-restore-window-config t)
    (setq writeroom-width 100))
#+end_src

** TODO Perspective

#+begin_src emacs-lisp
  (use-package perspective
    :custom
    (persp-mode-prefix-key (kbd "M-p"))
    :init
    (persp-mode))
#+end_src

** Benchmark init

#+begin_src emacs-lisp
  (use-package esup
    :defer
    :config
    (setq esup-depth 0))
#+end_src
