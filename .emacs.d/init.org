#+title: My emacs settings
#+property: header-args:emacs-lisp :tangle ~/Git/dotfiles/.emacs.d/init.el

** TODOs
***** DONE Orderless
***** DONE Corfu delay + no 3 keys
***** DONE Which key delay
***** DONE echo area single line
***** TODO undo tree
***** TODO DAP
***** TODO Icon theme
***** TODO startup time
***** TODO EMMS
***** TODO Org Roam
***** TODO vterm
***** TODO treemacs

** Packages (pre-setup)

If you get 404 when trying to install packages, run ~M-x package-refresh-contents~.

*** Setup MELPA

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

*** Setup use-package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile (require 'use-package))
  (setq use-package-always-ensure t)
#+end_src

** Visuals

*** De-clutter

Hides startup message, scroll bar and tool bar.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+end_src

No annoying bell sound nor flashing lights when something goes wrong.
#+begin_src emacs-lisp
  (blink-cursor-mode 0)
  (setq ring-bell-function 'ignore) ; this is actually sound, but...
#+end_src

*** Lines

Show relative line numbers for code.
#+begin_src emacs-lisp
  (column-number-mode 1) ;; TODO

  (setq display-line-numbers-type 'relative)

  (dolist (mode '(text-mode-hook
                 prog-mode-hook
                 conf-mode-hook))
    (add-hook mode #'display-line-numbers-mode))
#+end_src

Wrap long lines.
#+begin_src emacs-lisp
  (visual-line-mode 1)
#+end_src

*** Scroll

I don't know how to explain this shit.
But it improves scrolling for sure.

#+begin_src emacs-lisp
  (setq scroll-step 1)
  (setq scroll-margin 10)
  (setq scroll-conservatively 1000)
  (setq scroll-preserve-screen-position 1)
#+end_src

*** Font, Icons and Theme

**** Font

I just use the default font with a bigger size.
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :height 140)
#+end_src

**** Doom Themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-tomorrow-day t))
#+end_src

**** Icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p)
    :config (all-the-icons-install-fonts t))
#+end_src

**** Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init (doom-modeline-mode 1))
#+end_src

*** Whitspaces

#+begin_src emacs-lisp
  (add-hook 'prog-mode '(setq show-trailing-whitespace t))
#+end_src

*** Suppress annoying warnings

#+begin_src emacs-lisp
  (setq warning-minimum-level :emergency)
#+end_src

**** TODO show symbols for spaces and tabs

** Built-in modes and settings

*** Y or N instead of Yes or No
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** Disable lock files

#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

*** Emacs directories
#+begin_src emacs-lisp
  (setq user-emacs-directory "~/.cache/emacs/")
  (when (not (file-directory-p user-emacs-directory))
    (make-directory user-emacs-directory))

  ;; wtf
  (setq backup-directory-alist
	`((".*" . ,(expand-file-name "backups" user-emacs-directory)))
				     backup-by-copying t
				     version-control t
				     delete-old-versions t
				     vc-make-backup-files t
				     kept-old-versions 10
				     kept-new-versions 10)

#+end_src

*** Custom variables file

This way I can build init.el from init.org without loosing custom variables.

#+begin_src emacs-lisp
  (setq custom-file "~/Git/dotfiles/.emacs.d/custom.el")
#+end_src

*** Persist minibuffers

Persist minibuffers history, like in ~M-x~, ~C-x C-f~ and so on.

#+begin_src emacs-lisp
  (savehist-mode 1)
  (setq history-length 100)
#+end_src

*** Auto close pairs

Auto close pairs like '',"", [ ], { }, depending on the file type.

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

*** Recent opened files

Show recent files with ~M-x recentf~.

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-menu-items 100)
  (setq recentf-max-saved-items 100)
  (global-set-key "\C-x\ \C-r" 'recentf-open)
#+end_src

*** Save session

Save session when emacs is closed and restore when reopened.

#+begin_src emacs-lisp
  (desktop-save-mode 1)
#+end_src

*** Cursor position

Save cursor position per file.

#+begin_src emacs-lisp
  (save-place-mode 1)
#+end_src

*** Auto refresh files

Refreshs file automatically when its changed by other program. Also refreshes dired.

#+begin_src emacs-lisp
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t) ; for dired
#+end_src

*** Escape to quit prompts

Press escape to quit most prompts.

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** PDFs

I tried default emacs doc-view-mode but it didn't work with the PDFs I tested.

*** pdf-tools

Installing pdf-tools and opening a PDF file just works here.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+end_src

** Org Mode

*** Visuals

Show headings with special bullets instead o asterisks.

#+begin_src emacs-lisp
  (use-package org-bullets)
#+end_src

Change title and heading sizes.

#+begin_src emacs-lisp
    (add-hook 'org-mode-hook (lambda()
                                 (org-bullets-mode 1)
                                 (org-indent-mode 1)
                                 (set-face-attribute 'org-document-title nil :height 1.8)
                                 (set-face-attribute 'org-level-1 nil :height 1.8)
                                 (set-face-attribute 'org-level-2 nil :height 1.5)
                                 (set-face-attribute 'org-level-3 nil :height 1.2)
                                 (org-overview)))
#+end_src

Whether to hide or not symbols for emphasis like ~a~, *b*, /c/...

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)
#+end_src

Replace ~-~ by ~•~ on unordered lists.

#+begin_src emacs-lisp
					  ; org mode lists
					  ; (font-lock-add-keywords 'org-mode
					  ;     '(("^ *\\([-]\\) "
					  ;     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

** LSP, DAP and Languages

*** LSP with Eglot

Eglot is a builtin LSP client for emacs.

#+begin_src emacs-lisp
  (use-package eglot
    :hook
    (before-save . eglot-format)

    :init
    ;; do not block when loading lsp
    (setq eglot-sync-connect nil)

    ;; don't use more than one line for eldoc, unless called with K
    (setq eldoc-echo-area-use-multiline-p 1)

    (define-key evil-normal-state-map (kbd "gi") 'eglot-find-implementation))
#+end_src

*** Languages support

**** Go
#+begin_src emacs-lisp
  (use-package go-mode
    :hook
    (go-mode . eglot-ensure))
#+end_src

**** Nix
#+begin_src emacs-lisp
  (use-package nix-mode)
#+end_src

*** TODO DAP

** Vim keybindings

*** Vim-like keybindings

evil mode and evil-collection provide vim-like bindings.

#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :init
    (setq evil-want-C-u-scroll t) ; C-u won't work by default
    (setq evil-want-keybinding nil) ; what? idk
    (setq evil-undo-system 'undo-redo)
    :config
    (evil-mode 1)
    (define-key evil-normal-state-map (kbd "gb") 'evil-switch-to-windows-last-buffer)
    (define-key evil-normal-state-map (kbd "TT") 'tab-bar-switch-to-tab)
    (define-key evil-normal-state-map (kbd "Th") 'tab-previous)
    (define-key evil-normal-state-map (kbd "Tl") 'tab-next)
    (define-key evil-normal-state-map (kbd "Tn") 'tab-new)
    (define-key evil-normal-state-map (kbd "Tc") 'tab-close))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src


*** Keychord

I only use it to map ~jk~ to ~<Escape>~.

#+begin_src emacs-lisp
  (use-package key-chord
    :after evil
    :config
    (key-chord-mode 1)
    (setq key-chord-two-keys-delay 0.2)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+end_src

** Suggestion and Completion

*** Autosuggestion and Completion for Code

Emacs supports completion builtin with ~C-M-i~, but for a VSCode-like completion I use corfu.
You can still use ~C-M-i~ to launch corfu.

#+begin_src emacs-lisp
  (use-package corfu
    :init
    (corfu-auto t) ; automatically pops up as you type
    (corfu-auto-delay 200)
    (corfu-auto-prefix 1)
    (global-corfu-mode))
#+end_src

*** Autosuggestion for keybindings

~whick-key~ suggests key combinations as you press them.

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-secondary-delay 0.1))
#+end_src

** Git

*** Magit

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** Diff Highlight

#+begin_src emacs-lisp
  (use-package diff-hl
    :init (global-diff-hl-mode 1))
#+end_src

** Directory Tree

*** NeoTree

#+begin_src emacs-lisp
  ;; (use-package neotree
  ;;   :config
  ;;   (global-set-key [f8] 'neotree-toggle))
#+end_src

*** TreeMacs

#+begin_src emacs-lisp
  (use-package treemacs
    :demand t
    :config
    (setq treemacs-width 40)
    :bind
    (:map global-map
	  ([f8] . treemacs)))
#+end_src

** Misc. packages

*** Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :config
    (vertico-mode 1)
    (keymap-set vertico-map "C-j" #'vertico-next)
    (keymap-set vertico-map "C-k" #'vertico-previous))
#+end_src

*** Undo Tree

#+begin_src emacs-lisp
  (use-package undo-tree
    :init (global-undo-tree-mode 1))
#+end_src

*** Orderless

#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

*** Pomodoro

#+begin_src emacs-lisp
  ;; (use-package pomidor
  ;;   :config
  ;;   (setq pomidor-play-sound-file
  ;; 	(lambda (file)
  ;; 	  (start-process "aplay" nil "aplay" file))))
#+end_src
