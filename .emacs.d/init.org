#+title: My emacs settings
#+property: header-args:emacs-lisp :tangle ./init.el

** Visuals

*** De-clutter

Hides startup message, scroll bar and tool bar.
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+end_src

No annoying bell sound nor flashing lights when something goes wrong.
#+begin_src emacs-lisp
(blink-cursor-mode 0)
(setq ring-bell-function 'ignore) ; this is actually sound, but...
#+end_src


*** Lines

Show relative line numbers.
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(setq display-line-numbers 'relative)
#+end_src

Wrap long lines.
#+begin_src emacs-lisp
(visual-line-mode 1)
#+end_src

*** Scroll

I don't know how to explain this shit.
But it improves scrolling for sure.

#+begin_src emacs-lisp
(setq scroll-step 1)
(setq scroll-margin 10)
(setq scroll-conservatively 1000)
(setq scroll-preserve-screen-position 1)
#+end_src

*** Font and Theme

I just use the default font with a bigger size.
#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 140)
#+end_src

Global theme.
#+begin_src emacs-lisp
; looks like vscode light theme
(load-theme 'leuven)

; usable dark theme
;(load-theme 'modus-vivendi)
#+end_src

*** Whitspaces

Colors trailing whitespaces in red.
**** TODO only use for code. Its currently being applied to terminal too.
#+begin_src emacs-lisp
(setq-default show-trailing-whitespace t)
#+end_src

**** TODO show symbols for spaces and tabs

** Behavior

Make emacs behave more like an IDE.

*** Persist minibuffers

Persist minibuffers history, like in ~M-x~, ~C-x C-f~ and so on.

#+begin_src emacs-lisp
(savehist-mode 1)
(setq history-length 25)
#+end_src

*** Auto close pairs

Auto close pairs like ~''~, ~""~, ~[ ]~, ~{ }~, depending on the file type.

#+begin_src emacs-lisp
(electric-pair-mode 1)
#+end_src

*** Recent opened files

Show recent files with ~M-x recentf~.

#+begin_src emacs-lisp
(recentf-mode 1)
#+end_src

*** Save session

Save session when emacs is closed and restore when reopened.

#+begin_src emacs-lisp
(desktop-save-mode 1)
#+end_src

*** Cursor position

Save cursor position per file.

#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

*** Auto refresh files

Refreshs file automatically when its changed by other program. Also refreshes dired.

#+begin_src emacs-lisp
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t) ; for dired
#+end_src

*** Escape to quit prompts

Press escape to quit most prompts.

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Org Mode

*** Visuals

Change title and heading sizes.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'(lambda()
			    (set-face-attribute 'org-document-title nil :height 1.8)
			    (set-face-attribute 'org-level-1 nil :height 1.8)
			    (set-face-attribute 'org-level-2 nil :height 1.5)
			    (set-face-attribute 'org-level-3 nil :height 1.2)))
#+end_src

Replace ~-~ by ~•~ on unordered lists.

#+begin_src emacs-lisp
; org mode lists
; (font-lock-add-keywords 'org-mode
;     '(("^ *\\([-]\\) "
;     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

** Packages

If you get 404 when trying to install packages, run ~M-x package-refresh-contents~.

*** Setup MELPA

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+end_src

*** Setup use-package

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
(eval-when-compile (require 'use-package))
(setq use-package-always-ensure t)
#+end_src

*** Keychord

I only use it to map ~jk~ to ~<Escape>~.

#+begin_src emacs-lisp
(use-package key-chord
    :after evil
    :config
    (key-chord-mode 1)
    (setq key-chord-two-keys-delay 0.2)
    (key-chord-define evil-insert-state-map "jk" 'evil-normal-state))
#+end_src

*** Vim-like keybindings

evil mode and evil-collection provide vim-like bindings.

#+begin_src emacs-lisp
(use-package evil
    :demand t
    :init
    (setq evil-want-C-u-scroll t) ; C-u won't work by default
    (setq evil-want-keybinding nil) ; what? idk
    :config
    (evil-mode 1))

(use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src

*** LSP with Eglot

Eglot is a builtin LSP client for emacs.

**** TODO move hooks for each language settings

#+begin_src emacs-lisp
(use-package eglot
    :hook
    (go-mode . eglot-ensure)
    :config
    (keymap-set eglot-mode-map "C-x r" #'eglot-rename))

; format on save
(add-hook 'before-save-hook 'eglot-format)
#+end_src

*** Languages support

**** Go
#+begin_src emacs-lisp
(use-package go-mode)
#+end_src

**** Nix
#+begin_src emacs-lisp
(use-package nix-mode)
#+end_src

*** Autosuggestion and Completion

Emacs supports completion builtin with ~C-M-i~, but for a VSCode-like completion I use corfu.
You can still use ~C-M-i~ to launch corfu.

#+begin_src emacs-lisp
(use-package corfu
    :custom
    (corfu-auto t) ; automatically pops up as you type
    :init
    (global-corfu-mode))
#+end_src

*** Which Key

Suggests key combinations as you press them.

#+begin_src emacs-lisp
  (use-package which-key
      :config (which-key-mode))
#+end_src

*** Vertico

#+begin_src emacs-lisp
(use-package vertico
    :config
    (vertico-mode 1)
    (keymap-set vertico-map "C-j" #'vertico-next)
    (keymap-set vertico-map "C-k" #'vertico-previous))
#+end_src

*** Magit

#+begin_src emacs-lisp
(use-package magit)
#+end_src

*** NeoTree

#+begin_src emacs-lisp
(use-package neotree
    :config
    (global-set-key [f8] 'neotree-toggle))
#+end_src

*** Restart Emacs

#+begin_src emacs-lisp
(use-package restart-emacs)
#+end_src
